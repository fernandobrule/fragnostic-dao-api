package com.fragnostic.dao.support

import java.sql.PreparedStatement

import com.fragnostic.support.DbTypesSupport
import org.slf4j.{ Logger, LoggerFactory }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait StatementTypeHandler extends DbTypesSupport {

  private[this] val logger: Logger = LoggerFactory.getLogger(getClass.getName)

  private val handlerContainer =
    Map(
      "Short" -> shortHandler,
      "String" -> stringHandler,
      "Long" -> longHandler,
      "Int" -> intHandler,
      "Date" -> dateHandler,
      "Timestamp" -> timestampHandler,
      "BigDecimal" -> bigDecimalHandler)

  def handle(handlerName: String): Either[String, (PreparedStatement, Int, Map[Int, (String, String)]) => Unit] =
    if (handlerContainer.contains(handlerName))
      Right(handlerContainer(handlerName))
    else Left("statement.type.handler.error.doesnt.exists")

  private def shortHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) => {
      if (logger.isInfoEnabled) logger.info(s"Short Handler | numParam:$numParam")
      prepStat.setShort(numParam, java.lang.Short.valueOf(params(numParam)._2))
    }

  private def intHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) => {
      if (logger.isInfoEnabled) logger.info(s"Int Handler | numParam:$numParam")
      prepStat.setInt(numParam, java.lang.Integer.valueOf(params(numParam)._2))
    }

  private def longHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) => {
      if (logger.isInfoEnabled) logger.info(s"Long Handler | numParam:$numParam")
      prepStat.setLong(numParam, java.lang.Long.valueOf(params(numParam)._2))
    }

  private def bigDecimalHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) => {
      if (logger.isInfoEnabled) logger.info(s"BigDecimal Handler | numParam:$numParam")
      prepStat.setBigDecimal(
        numParam,
        new java.math.BigDecimal(params(numParam)._2))
    }

  private def stringHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) => {
      if (logger.isInfoEnabled) logger.info(s"String Handler | numParam:$numParam")
      prepStat.setString(
        numParam,
        java.lang.String.valueOf(params(numParam)._2))
    }

  private def dateHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) =>
      str2sqlDate(params(numParam)._2) fold (
        error => (),
        sqlDate => prepStat.setDate(
          numParam,
          sqlDate))

  private def timestampHandler =
    (prepStat: PreparedStatement,
      numParam: Int,
      params: Map[Int, (String, String)]) =>
      str2sqlTst(params(numParam)._2) fold (
        error => (),
        sqlTst => prepStat.setTimestamp(
          numParam,
          sqlTst))

}
