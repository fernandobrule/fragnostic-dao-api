package com.fragnostic.dao.support

import org.slf4j.{ Logger, LoggerFactory }

import java.sql.PreparedStatement

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait StatementTypeHandler extends DbTypesSupport {

  private[this] val logger: Logger = LoggerFactory.getLogger("StatementTypeHandler")

  private val handlerContainer =
    Map(
      "Short" -> shortHandler,
      "String" -> stringHandler,
      "Long" -> longHandler,
      "Int" -> intHandler,
      "Date" -> dateHandler,
      "Timestamp" -> timestampHandler,
      "BigDecimal" -> bigDecimalHandler //
    )

  def getHandler(handlerName: String): Either[String, (PreparedStatement, Int, Map[Int, (String, String)]) => Unit] = {
    //logger.info(s"getHandler() - enter")
    if (handlerContainer.contains(handlerName)) {
      Right(handlerContainer(handlerName))
    } else {
      logger.error(s"getHandler() - the requested handler [$handlerName] does not exists, available handlers[${handlerContainer.keys.foldRight("")((l, r) => s"$l, $r")}]")
      Left(s"statement.type.handler.error.the.requested.handler.doesnot.exists___[${handlerName}]")
    }
  }

  private def shortHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) => {
    prepStat.setShort(numParam, java.lang.Short.valueOf(params(numParam)._2))
  }

  private def intHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) => {
    prepStat.setInt(numParam, java.lang.Integer.valueOf(params(numParam)._2))
  }

  private def longHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) => {
    prepStat.setLong(numParam, java.lang.Long.valueOf(params(numParam)._2))
  }

  private def bigDecimalHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) => {
    prepStat.setBigDecimal(
      numParam,
      new java.math.BigDecimal(params(numParam)._2) //
    )
  }

  private def stringHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) => {
    prepStat.setString(
      numParam,
      java.lang.String.valueOf(params(numParam)._2) //
    )
  }

  private def dateHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) =>
    str2sqlDate(params(numParam)._2) fold (
      error => (),
      sqlDate => prepStat.setDate(
        numParam,
        sqlDate //
      ) //
    )

  private def timestampHandler = (prepStat: PreparedStatement, numParam: Int, params: Map[Int, (String, String)]) =>
    str2sqlTst(params(numParam)._2) fold (
      error => (),
      sqlTst => prepStat.setTimestamp(
        numParam,
        sqlTst //
      ) //
    )

}
