package com.fragnostic.dao.support

import java.sql.{ PreparedStatement, ResultSet }

import org.slf4j.{ Logger, LoggerFactory }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait JdbcGeneratedKeysAgnostic extends CloseResourceAgnostic {

  private[this] val logger: Logger = LoggerFactory.getLogger("JdbcGeneratedKeysAgnostic")

  def getLongGenKey(prepStat: PreparedStatement, args: Seq[String]): Option[Long] =
    getGenKey[Long](
      prepStat,
      args,
      (resultSet: ResultSet, args: Seq[String]) => try {
        Right(resultSet.getLong(1))
      } catch {
        case e: Exception =>
          logger.error(s"getLongGenKey() - $e")
          Left("jdbc.generated.keys.agnostic.get.long.gen.key.error")
      })

  def getGenKey[T](
    prepStat: PreparedStatement,
    args: Seq[String],
    resultSetExtract: (ResultSet, Seq[String]) => Either[String, T]): Option[T] = {
    val resultSet = prepStat.getGeneratedKeys
    resultSet.next()
    resultSetExtract(resultSet, args) fold (
      error => {
        logger.error(s"getGenKey() - $error")
        None
      },
      genKey => {
        close(resultSet)
        Some(genKey)
      })
  }

  def getIntGenKey(
    prepStat: PreparedStatement, args: Seq[String]): Option[Int] =
    getGenKey[Int](
      prepStat,
      args,
      (resultSet: ResultSet, args: Seq[String]) => try {
        Right(resultSet.getInt(1))
      } catch {
        case e: Exception =>
          logger.error(s"getIntGenKey() - $e")
          Left("jdbc.generated.keys.agnostic.get.int.gen.key.error")
      })

}
