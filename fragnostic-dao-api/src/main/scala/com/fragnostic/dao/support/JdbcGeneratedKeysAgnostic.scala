package com.fragnostic.dao.support

import java.sql.{ PreparedStatement, ResultSet }

import org.slf4j.{ Logger, LoggerFactory }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait JdbcGeneratedKeysAgnostic extends CloseResourceAgnostic {

  private[this] val logger: Logger = LoggerFactory.getLogger(getClass.getName)

  def getLongGenKey(prepStat: PreparedStatement): Option[Long] =
    getGenKey[Long](
      prepStat,
      (resultSet: ResultSet) => try {
        Right(resultSet.getLong(1))
      } catch {
        case e: Exception =>
          logger.error(s"getLongGenKey() - $e")
          Left("jdbc.generated.keys.agnostic.get.long.gen.key.error")
      })

  def getGenKey[T](
    prepStat: PreparedStatement,
    resultSetExtract: ResultSet => Either[String, T]): Option[T] =
    {
      val resultSet = prepStat.getGeneratedKeys
      resultSet.next()
      resultSetExtract(resultSet) fold (
        error => {
          logger.error(s"getGenKey() - $error")
          None
        },
        genKey => {
          close(resultSet)
          Some(genKey)
        })
    }

  def getIntGenKey(
    prepStat: PreparedStatement): Option[Int] =
    getGenKey[Int](
      prepStat,
      (resultSet: ResultSet) => try {
        Right(resultSet.getInt(1))
      } catch {
        case e: Exception =>
          logger.error(s"getIntGenKey() - $e")
          Left("jdbc.generated.keys.agnostic.get.int.gen.key.error")
      })

}
