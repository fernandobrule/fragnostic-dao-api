package com.fragnostic.dao.support

import java.sql.PreparedStatement

import org.slf4j.{ Logger, LoggerFactory }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait FilloutPreparedStatementAgnostic {

  private[this] val logger: Logger = LoggerFactory.getLogger(getClass.getName)

  def filloutPsWithString =
    (prepStat: PreparedStatement, value: String) =>
      try {
        prepStat.setString(1, value)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.string.error")
        }
      }

  def filloutPsWithShort =
    (prepStat: PreparedStatement, value: Short) =>
      try {
        prepStat.setShort(1, value)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.short.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.short.error")
        }
      }

  def filloutPsWithShortStrLng =
    (prepStat: PreparedStatement, req: (Short, String, Long)) =>
      try {
        prepStat.setShort(1, req._1)
        prepStat.setString(2, req._2)
        prepStat.setLong(3, req._3)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.short.string.long.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.short.string.long.error")
        }
      }

  def filloutPsWithInt =
    (prepStat: PreparedStatement, value: Int) =>
      try {
        prepStat.setInt(1, value)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.int.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.int.error")
        }
      }

  def filloutPsWithIntInt =
    (prepStat: PreparedStatement, req: (Int, Int)) =>
      try {
        prepStat.setInt(1, req._1)
        prepStat.setInt(2, req._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.int.int.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.int.int.error")
        }
      }

  def filloutPsWithIntLong =
    (prepStat: PreparedStatement, req: (Int, Long)) =>
      try {
        prepStat.setInt(1, req._1)
        prepStat.setLong(2, req._2)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.int.long.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.int.long.error")
      }

  def filloutPsWithLong =
    (prepStat: PreparedStatement, value: Long) =>
      try {
        prepStat.setLong(1, value)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.error")
        }
      }

  def filloutPsWithLngShort =
    (prepStat: PreparedStatement, request: (Long, Short)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setShort(2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.short.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.short.error")
        }
      }

  def filloutPsWithLngStr =
    (prepStat: PreparedStatement, request: (Long, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setString(2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.string.error")
        }
      }

  def filloutPsWithLngStrStr =
    (prepStat: PreparedStatement,
      request: (Long, String, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setString(2, request._2)
        prepStat.setString(3, request._3)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.stringx2.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.stringx2.string.error")
        }
      }

  def filloutPsWithLngStrStrStr =
    (prepStat: PreparedStatement,
      request: (Long, String, String, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setString(2, request._2)
        prepStat.setString(3, request._3)
        prepStat.setString(4, request._4)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.stringx3.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.stringx3.string.error")
        }
      }

  def filloutPsWithLngStrStrStrStr =
    (prepStat: PreparedStatement,
      request: (Long, String, String, String, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setString(2, request._2)
        prepStat.setString(3, request._3)
        prepStat.setString(4, request._4)
        prepStat.setString(5, request._5)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.stringx4.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.stringx4.string.error")
        }
      }

  def filloutPsWithLngLng =
    (prepStat: PreparedStatement, request: (Long, Long)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setLong(2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.long.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.long.error")
        }
      }

  def filloutPsWithLngLngStr =
    (prepStat: PreparedStatement,
      request: (Long, Long, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setLong(2, request._2)
        prepStat.setString(3, request._3)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.long.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.long.string,error")
        }
      }

  def filloutPsWithLngLngStrStr =
    (prepStat: PreparedStatement,
      request: (Long, Long, String, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setLong(2, request._2)
        prepStat.setString(3, request._3)
        prepStat.setString(4, request._4)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.long.string.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.long.string.string,error")
        }
      }

  def filloutPsWithLngInt =
    (prepStat: PreparedStatement, request: (Long, Int)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setInt(2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.int.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.int.error")
        }
      }

  def filloutPsWithStrLngStr =
    (prepStat: PreparedStatement,
      request: (String, Long, String)) =>
      try {
        prepStat.setString(1, request._1)
        prepStat.setLong(2, request._2)
        prepStat.setString(3, request._3)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.string.long.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.string.long.string.error")
        }
      }

  def filloutPsWithStrLngLng =
    (prepStat: PreparedStatement,
      request: (String, Long, Long)) =>
      try {
        prepStat.setString(1, request._1)
        prepStat.setLong(2, request._2)
        prepStat.setLong(3, request._3)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"filloutPsWithStrLngLng | $e")
          Left("fillout.prepstat.agnostic.with.string.long.long.error")
        }
        case e: Throwable => {
          logger.error(s"filloutPsWithStrLngLng | $e")
          Left("fillout.prepstat.agnostic.with.string.long.long.error")
        }
      }

  def filloutPsWithStrStr =
    (prepStat: PreparedStatement,
      request: (String, String)) =>
      try {
        prepStat.setString(1, request._1)
        prepStat.setString(2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"filloutPsWithStrStr |$e")
          Left("fillout.prepstat.agnostic.with.string.string.error.1")
        }
        case e: Throwable => {
          logger.error(s"filloutPsWithStrStr | $e")
          Left("fillout.prepstat.agnostic.with.string.string.error.2")
        }
      }

  def filloutPsWithStrLng =
    (prepStat: PreparedStatement, request: (String, Long)) =>
      try {
        prepStat.setString(1, request._1)
        prepStat.setLong(2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"filloutPsWithStrLng | $e")
          Left("fillout.prepstat.agnostic.with.string.long.error")
        }
        case e: Throwable => {
          logger.error(s"filloutPsWithStrLng | $e")
          Left("fillout.prepstat.agnostic.with.string.long.error")
        }
      }

  def filloutPsWithBigDecLng = (prepStat: PreparedStatement, request: (BigDecimal, Long)) =>
    try {
      prepStat.setBigDecimal(1, request._1.bigDecimal)
      prepStat.setLong(2, request._2)
      Right(prepStat)
    } catch {
      case e: Exception => {
        logger.error(s"filloutPsWithBigDecLng | $e")
        Left("fillout.prepstat.agnostic.with.bigdecimal.long.error")
      }
      case e: Throwable => {
        logger.error(s"filloutPsWithBigDecLng | $e")
        Left("fillout.prepstat.agnostic.with.bigdecimal.long.error")
      }
    }

  def filloutPsWithStrShortLng =
    (prepStat: PreparedStatement,
      request: (String, Short, Long)) =>
      try {
        prepStat.setString(1, request._1)
        prepStat.setShort(2, request._2)
        prepStat.setLong(3, request._3)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"filloutPsWithStrShortLng | $e")
          Left("fillout.prepstat.agnostic.with.string.short.long")
        }
        case e: Throwable => {
          logger.error(s"filloutPsWithStrShortLng | $e")
          Left("fillout.prepstat.agnostic.with.string.short.long")
        }
      }

  //type T <: Tuple1[_] with Tuple2[_, _] with Tuple3[_, _, _] with Tuple4[_, _, _, _] with Tuple5[_, _, _, _, _]
  //type TS <: Tuple1[String] with Tuple2[String, String] with Tuple3[String, String, String] with Tuple4[String, String, String, String] with Tuple5[String, String, String, String, String]

  def filloutPsWithArrStr =
    (prepStat: PreparedStatement, request: Array[String]) =>
      try {
        1 to request.length foreach (idx =>
          prepStat.setString(idx, request(idx - 1)))
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"filloutPsWithArrStr | $e")
          Left("fillout.prepstat.agnostic.with.array.string.string.long")
        }
        case e: Throwable => {
          logger.error(s"filloutPsWithArrStr | $e")
          Left("fillout.prepstat.agnostic.with.array.string.string.long")
        }
      }

  def filloutPsWithLngBoolStrShortStr =
    (prepStat: PreparedStatement,
      request: (Long, Boolean, String, Short, String)) =>
      try {
        prepStat.setLong(1, request._1)
        prepStat.setBoolean(2, request._2)
        prepStat.setString(3, request._3)
        prepStat.setShort(4, request._4)
        prepStat.setString(5, request._5)
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.boolean.string.short.string.error")
        }
        case e: Throwable => {
          logger.error(s"$e")
          Left("fillout.prepstat.agnostic.with.long.boolean.string.short.string,error")
        }
      }

}
