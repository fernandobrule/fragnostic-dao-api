package com.fragnostic.dao.support

import java.sql.{ PreparedStatement, Timestamp }
import java.util.Date

import org.slf4j.{ Logger, LoggerFactory }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait FilloutPreparedStatementAgnostic extends DbTypesSupport {

  private[this] val logger: Logger = LoggerFactory.getLogger(getClass.getName)

  def filloutPsWithStrList =
    (prepStat: PreparedStatement, req: List[String]) =>
      try {
        req.zipWithIndex.foreach(par => prepStat.setString(par._2 + 1, par._1))
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"filloutPsWithStrList() - $e")
          Left("fillout.ps.with.string.list.error")
        case e: Throwable =>
          logger.error(s"filloutPsWithStrList() - $e")
          Left("fillout.ps.with.string.list.error")
      }

  def filloutPsWithLongList =
    (prepStat: PreparedStatement, req: List[Long]) =>
      try {
        req.zipWithIndex.foreach(par => prepStat.setLong(par._2 + 1, par._1))
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"filloutPsWithStrList() - $e")
          Left("fillout.ps.with.long.list.error")
        case e: Throwable =>
          logger.error(s"filloutPsWithStrList() - $e")
          Left("fillout.ps.with.long.list.error")
      }

  //type T <: Tuple1[_] with Tuple2[_, _] with Tuple3[_, _, _] with Tuple4[_, _, _, _] with Tuple5[_, _, _, _, _]
  //type TS <: Tuple1[String] with Tuple2[String, String] with Tuple3[String, String, String] with Tuple4[String, String, String, String] with Tuple5[String, String, String, String, String]

  def filloutPsWithArrStr =
    (prepStat: PreparedStatement, request: Array[String]) =>
      try {
        1 to request.length foreach (idx => prepStat.setString(idx, request(idx - 1)))
        Right(prepStat)
      } catch {
        case e: Exception => {
          logger.error(s"filloutPsWithArrStr | $e")
          Left("fillout.ps.with.array.string.string.long")
        }
        case e: Throwable => {
          logger.error(s"filloutPsWithArrStr | $e")
          Left("fillout.ps.with.array.string.string.long")
        }
      }

  private def handle[T](p: PreparedStatement, parameterIndex: Int, t: T): Unit = {
    t match {
      case shr: Short => p.setShort(parameterIndex, shr)
      case int: Int => p.setInt(parameterIndex, int)
      case lng: Long => p.setLong(parameterIndex, lng)
      case dbl: Double => p.setDouble(parameterIndex, dbl)
      case bdc: BigDecimal => p.setBigDecimal(parameterIndex, bdc.bigDecimal)
      case str: String => p.setString(parameterIndex, str)
      case flt: Float => p.setFloat(parameterIndex, flt)
      case tms: Timestamp => p.setTimestamp(parameterIndex, tms)
      case bool: Boolean => p.setBoolean(parameterIndex, bool)
      case utilDate: Date =>
        utilDate2sqlDate(utilDate) fold (
          error => {
            logger.error(s"handle() - non handled type:$t, $error")
            throw new IllegalStateException("fillout.ps.handle.error")
          },
          sqlDate => p.setDate(parameterIndex, sqlDate))
      case _ =>
        logger.error(s"handle() - non handled type:$t")
        throw new IllegalStateException("fillout.ps.handle.error")
    }
  }

  def filloutPsWith1Args[T]: (PreparedStatement, (T)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (T)) =>
      try {
        handle(prepStat, 1, request)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.1.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.1.args.error")
      }

  def filloutPsWith2Args[T, U]: (PreparedStatement, (T, U)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (T, U)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.2.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.2.args.error")
      }

  def filloutPsWith3Args[T, U, V]: (PreparedStatement, (T, U, V)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (T, U, V)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.3.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.3.args.error")
      }

  def filloutPsWith4Args[T, U, V, W]: (PreparedStatement, (T, U, V, W)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (T, U, V, W)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.4.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.4.args.error")
      }

  def filloutPsWith5Args[T, U, V, W, X]: (PreparedStatement, (T, U, V, W, X)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (T, U, V, W, X)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.5.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.5.args.error")
      }

  def filloutPsWith6Args[S, T, U, V, W, X]: (PreparedStatement, (S, T, U, V, W, X)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (S, T, U, V, W, X)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.6.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.6.args.error")
      }

  def filloutPsWith7Args[R, S, T, U, V, W, X]: (PreparedStatement, (R, S, T, U, V, W, X)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (R, S, T, U, V, W, X)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        handle(prepStat, 7, request._7)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.7.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.7.args.error")
      }

  def filloutPsWith8Args[Q, R, S, T, U, V, W, X]: (PreparedStatement, (Q, R, S, T, U, V, W, X)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (Q, R, S, T, U, V, W, X)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        handle(prepStat, 7, request._7)
        handle(prepStat, 8, request._8)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.8.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.8.args.error")
      }

  def filloutPsWith9Args[P, Q, R, S, T, U, V, W, X]: (PreparedStatement, (P, Q, R, S, T, U, V, W, X)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (P, Q, R, S, T, U, V, W, X)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        handle(prepStat, 7, request._7)
        handle(prepStat, 8, request._8)
        handle(prepStat, 9, request._9)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.9.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.9.args.error")
      }

  def filloutPsWith10Args[O, P, Q, R, S, T, U, V, W, X]: (PreparedStatement, (O, P, Q, R, S, T, U, V, W, X)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (O, P, Q, R, S, T, U, V, W, X)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        handle(prepStat, 7, request._7)
        handle(prepStat, 8, request._8)
        handle(prepStat, 9, request._9)
        handle(prepStat, 10, request._10)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.10.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.10.args.error")
      }

  def filloutPsWith11Args[O, P, Q, R, S, T, U, V, W, X, Y]: (PreparedStatement, (O, P, Q, R, S, T, U, V, W, X, Y)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (O, P, Q, R, S, T, U, V, W, X, Y)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        handle(prepStat, 7, request._7)
        handle(prepStat, 8, request._8)
        handle(prepStat, 9, request._9)
        handle(prepStat, 10, request._10)
        handle(prepStat, 11, request._11)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.11.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.11.args.error")
      }

  def filloutPsWith12Args[O, P, Q, R, S, T, U, V, W, X, Y, Z]: (PreparedStatement, (O, P, Q, R, S, T, U, V, W, X, Y, Z)) => Either[String, PreparedStatement] =
    (prepStat: PreparedStatement, request: (O, P, Q, R, S, T, U, V, W, X, Y, Z)) =>
      try {
        handle(prepStat, 1, request._1)
        handle(prepStat, 2, request._2)
        handle(prepStat, 3, request._3)
        handle(prepStat, 4, request._4)
        handle(prepStat, 5, request._5)
        handle(prepStat, 6, request._6)
        handle(prepStat, 7, request._7)
        handle(prepStat, 8, request._8)
        handle(prepStat, 9, request._9)
        handle(prepStat, 10, request._10)
        handle(prepStat, 11, request._11)
        handle(prepStat, 12, request._12)
        Right(prepStat)
      } catch {
        case e: Exception =>
          logger.error(s"$e")
          Left("fillout.ps.with.12.args.error")
        case e: Throwable =>
          logger.error(s"$e")
          Left("fillout.ps.with.12.args.error")
      }

}
