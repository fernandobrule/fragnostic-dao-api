package com.fragnostic.dao.crud

import java.sql.{ Connection, PreparedStatement }

import com.fragnostic.dao.support.{ CloseResourceAgnostic, ConnectionAgnostic, StatementAgnostic }
import org.slf4j.{ Logger, LoggerFactory }

import scala.util.Try

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait UpdateAgnostic extends CloseResourceAgnostic with ConnectionAgnostic with StatementAgnostic {

  private[this] val logger: Logger = LoggerFactory.getLogger("UpdateAgnostic")

  //
  // Update
  //
  def update[UR](
    updateRequest: UR,
    sqlUpdate: String,
    filloutPsUpdate: (PreparedStatement, UR) => Either[String, PreparedStatement],
    validateAffRows: Option[Int] = Some(1)): Either[String, Int] =
    getConnection map (connection =>
      update(connection, updateRequest, sqlUpdate, filloutPsUpdate) fold (
        error => {
          logger.error(s"update | error: $error")
          closeWithoutCommit(connection)
          Left(error)
        },
        affectedRows =>
          validateAffRows map (
            number =>
              if (affectedRows == number) {
                closeWithCommit(connection)
                Right(affectedRows)
              } else {
                closeWithoutCommit(connection)
                logger.error(
                  s"upd.agnostic.error.aff.rows.are.not.$number.was.$affectedRows.a.roll.back.was.done")
                Left(
                  s"upd.agnostic.error.aff.rows.are.not.equal.to.expected.a.roll.back.was.done")
              }) getOrElse {
              closeWithCommit(connection)
              Right(affectedRows)
            })) getOrElse Left("upd.agnostic.error.no.db.conn")

  //
  // Update
  //
  def update[UR](
    connection: Connection,
    updateRequest: UR,
    sqlUpdate: String,
    filloutPsUpdate: (PreparedStatement, UR) => Either[String, PreparedStatement]): Either[String, Int] = {
    Try({
      val prepStat = connection.prepareStatement(sqlUpdate)
      Try({
        filloutPsUpdate(prepStat, updateRequest)
        val affectedRows = prepStat.executeUpdate()
        close(prepStat)
        Right(affectedRows)
      }) getOrElse {
        close(prepStat)
        Left(
          s"Error trying to execute update:\n\t $updateRequest\n\t - sqlUpdate: $sqlUpdate")
      }
    }) getOrElse Left(s"upd.agnostic.error.on.prep.stat")

  }

}
