package com.fragnostic.dao.crud

import java.sql.{ Connection, PreparedStatement, ResultSet, Statement }

import com.fragnostic.dao.support.{ ConnectionAgnostic, JdbcGeneratedKeysAgnostic, PreparedStatementSupport }
import org.slf4j.{ Logger, LoggerFactory }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait CreateAgnostic extends ConnectionAgnostic with PreparedStatementSupport with JdbcGeneratedKeysAgnostic {

  private[this] val logger: Logger = LoggerFactory.getLogger("CreateAgnostic")

  //
  // Create
  //
  def create[I, R](
    createRequest: R,
    sqlCreate: String,
    filloutPsCreate: (PreparedStatement, R) => Either[String, PreparedStatement],
    resultSetExtractId: (ResultSet, Map[String, String]) => Either[String, I],
    args: Map[String, String] = Map.empty): Either[String, I] =
    getConnection map (
      connection =>
        create(
          connection,
          createRequest,
          sqlCreate,
          filloutPsCreate,
          resultSetExtractId,
          args) fold (
          error => {
            logger.error(s"create |Â error: $error")
            closeWithoutCommit(connection)
            Left(error)
          },
          id => {
            closeWithCommit(connection)
            Right(id)
          })) getOrElse Left("create.agnostic.error.db.no.connection")

  //
  // Create
  //
  def create[I, R](
    connection: Connection,
    createRequest: R,
    sqlCreate: String,
    filloutPsCreate: (PreparedStatement, R) => Either[String, PreparedStatement],
    resultSetExtractId: (ResultSet, Map[String, String]) => Either[String, I],
    args: Map[String, String]): Either[String, I] = {

    val prepStat =
      connection.prepareStatement(sqlCreate, Statement.RETURN_GENERATED_KEYS)
    filloutPsCreate(prepStat, createRequest)
    executeUpdate(prepStat) fold (
      error => {
        logger.error(
          s"create | Error trying to execute create:\n\t- $createRequest\n\t- sqlCreate:$sqlCreate")
        close(prepStat)
        Left("create.agnostic.error.execute.update")
      },
      affectedRows => {
        getGenKey[I](prepStat, args, resultSetExtractId) map (
          entityId => {
            close(prepStat)
            Right(entityId)
          }) getOrElse {
            close(prepStat)
            Left("create.agnostic.error.getting.pk")
          }
      })

  }

}
