package com.fragnostic.dao.crud

import com.fragnostic.dao.support.{ CloseResourceAgnostic, ConnectionAgnostic, RecursionSupport }
import org.slf4j.{ Logger, LoggerFactory }

import java.sql.{ ResultSet, SQLException }

/**
 * Created by Fernando Brule on 30-06-2015 22:23:00.
 * Generated by Tesseract.
 */
trait SuggestAgnostic extends ConnectionAgnostic with CloseResourceAgnostic with RecursionSupport {

  private[this] val logger: Logger = LoggerFactory.getLogger("SuggestAgnostic")

  def suggestBy[S](
    query: String,
    sqlSuggest: String,
    limit: Int,
    newSuggest: (ResultSet, Map[String, String]) => Either[String, S],
    args: Map[String, String] = Map.empty): Either[String, List[S]] = {
    getConnection map (connection =>
      try {
        // TODO this try
        val prepStat = connection.prepareStatement(sqlSuggest)
        prepStat.setString(1, s"$query")
        prepStat.setInt(2, limit)
        val resultSet = prepStat.executeQuery()

        close(resultSet)
        close(prepStat)
        closeWithoutCommit(connection)
        Right(newList(resultSet, newSuggest, args))

      } catch {
        case e: SQLException =>
          closeWithoutCommit(connection)
          logger.error(s"suggestBy|\n\n- $e\n- sqlSuggest: $sqlSuggest\n- query: $query")
          Left("suggest.agnostic.error")
        case e: Exception =>
          closeWithoutCommit(connection)
          logger.error(s"suggestBy|\n\n- $e\n- sqlSuggest: $sqlSuggest\n- query: $query")
          Left("suggest.agnostic.error")
      } //
    ) getOrElse Left(s"suggest|Error: trying to get DB connection")
  }

}
